<?xml version="1.0" encoding="UTF-8"?>
<!--$Date$-->
<!--$Revision$-->
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="CRAM-UI" default="default" basedir=".">
    <description>Builds, tests, and runs the project CRAM-UI.</description>
    <import file="nbproject/build-impl.xml"/>
    <property file="launch4j.properties"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="CRAM-UI-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->
    <target name="-pre-jar" description="Sets the buildversion and build date for the current build">
	<!--Get the svn version-->
        <exec outputproperty="svna.version" executable="svnversion">
	    <arg value="-c" />
	    <redirector>
		<outputfilterchain>
		    <tokenfilter>
			<replaceregex pattern="^[0-9]*:?" replace="" flags="g"/>
			<replaceregex pattern="M" replace="" flags="g"/>
		    </tokenfilter>
		</outputfilterchain>
	    </redirector>
	</exec>
	<echo level="info">Version found from SVN: ${svna.version}</echo>
	<replace file="${build.classes.dir}/uk/ac/lkl/cram/ui/Bundle.properties" token="@revision@" value="${svna.version}" />
	<!--put today's date in ${TODAY} variable-->
	<tstamp/>
	<echo level="info">Today's date: ${TODAY}</echo>
	<replace file="${build.classes.dir}/uk/ac/lkl/cram/ui/Bundle.properties" token="@date@" value="${TODAY}" />
    
    </target>
    
    <target name="-post-jar" depends="package" description="Copy the appropriate files to the dist directory, and package via dependency">
	<taskdef name="copy-template-page" classname="org.netbeans.modules.javawebstart.anttasks.CopyTemplatePageTask"
            classpath="${libs.JWSAntTasks.classpath}"/>
        <copy-template-page destfile="${dist.dir}/index.html" template="preview-application.html" destdir="${dist.dir}"/>
        <!--substitute SVN keywords-->
        <replace file="${dist.dir}/index.html" token="@revision@" value="${svna.version}" />
	<!--Put today's date in ${TODAY} variable (not sure if this is required as we've already done it in the '-pre-jar' target)-->
        <tstamp/>
        <replace file="${dist.dir}/index.html" token="@date@" value="${TODAY}" />
	<!--Copy image files-->
	<copy todir="${dist.dir}/images">
	    <fileset dir="images"/>
	</copy>
        <!--copy the videos.html file-->
        <copy file="videos.html" todir="${dist.dir}"/>
        <!--Copy css files-->
	<copy todir="${dist.dir}/css">
	    <fileset dir="css"/>
	</copy>
        <!--copy the user guide-->
        <copy file="${build.classes.dir}/uk/ac/lkl/cram/ui/resource/CRAMUserGuide.pdf" todir="${dist.dir}"/>
    </target>
        
    
    <taskdef name="bundleapp"
	     classname="com.oracle.appbundler.AppBundlerTask"   
	     classpath="lib/appbundler-1.0.jar" />
    
    
    
    <target name="package" description="Package into binaries">
	<property name="package.jar" value="${dist.dir}/${application.title}.jar"/>
	<echo  level="info" message="Packaging ${application.title} into a single JAR at ${package.jar}"/>
	<!--First create a temporary jar containing the built classes and the libraries-->
	<jar destfile="${dist.dir}/temp_final.jar" filesetmanifest="skip">
	    <zipgroupfileset dir="dist" includes="*.jar"/>
	    <zipgroupfileset dir="dist/lib" includes="*.jar"/>
	    <manifest>
		<attribute name="Main-Class" value="${main.class}"/>
	    </manifest>
	</jar>
	<!--Now zip the temporary jar into the package jar-->
	<zip destfile="${package.jar}">
	    <zipfileset src="${dist.dir}/temp_final.jar"
			excludes="META-INF/*.SF, META-INF/*.DSA, META-INF/*.RSA"/>
	</zip>
	<!--And delete the temporary jar-->
	<delete file="${dist.dir}/temp_final.jar"/>
	<echo  level="info" message="Creating Mac App"/>
	<bundleapp outputdirectory="dist"
		   name="${application.title}"
		   displayname="${application.title}"
		   icon="star.icns"
		   shortversion="${svna.version}"
		   identifier="{main.class}"
		   copyright="IOE 2014"
		   mainclassname="uk/ac/lkl/cram/ui/CRAMApplication">
	    <classpath file="${package.jar}"/>
	    <option value="-Dapple.laf.useScreenMenuBar=true"/>
	</bundleapp>
	<!--Zip the app, to make it easier to download, relies on platform's 'zip' executable-->
	<exec executable="zip" dir="${dist.dir}">
	    <arg value="-r" />
	    <arg value="${application.title}.zip" />
	    <arg value="${application.title}.app" />
	</exec>
	<!--Try to build the windows executable-->
	<antcall target="-buildWindows"/>
    </target>
    
    <target name="-buildWindows" depends="-launch4j-exists,-launch4j-no-exists" description="Try to build the windows executable"/>
    
    <target name="-launch4j-exists" if="launch4j.dir" description="Launch4J exists so built the windows exectuable">
	<echo  level="info" message="Creating Windows executable"/>
	<taskdef name="launch4j"
		 classname="net.sf.launch4j.ant.Launch4jTask"
		 classpath="${launch4j.dir}/launch4j.jar:${launch4j.dir}/lib/xstream.jar" />
	<property name="exe.file" value="${dist.dir}/${application.title}.exe"/>
	<launch4j>
	    <config headerType="gui" 
		    outfile="${exe.file}"
		    dontWrapJar="false" 
		    jar="${package.jar}" 
		    downloadurl="http://java.com/download" 
		    errtitle="${application.title}" 
		    icon="star.ico">  
		<jre minVersion="1.7.0" 
		     bundledjre64bit="false" 
		     jdkpreference="preferJre"/>     
	    </config>
	</launch4j>
    </target>
  
    <target name="-launch4j-no-exists" unless="launch4j.dir" description="Launch4J is not installed so cannot create windows executable">
	<echo  level="warning" message="Cannot create Windows executable: launch4j does not appear to be installed"/>
	<!--Edit the file launch4j.properties to set the location of the launch4j directory-->
    </target>
	  
</project>
