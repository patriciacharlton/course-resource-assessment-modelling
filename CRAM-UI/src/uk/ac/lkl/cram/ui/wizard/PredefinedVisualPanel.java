package uk.ac.lkl.cram.ui.wizard;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.ListModel;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import uk.ac.lkl.cram.model.LearnerFeedback;
import uk.ac.lkl.cram.model.StudentTeacherInteraction;
import uk.ac.lkl.cram.model.TLALibrary;
import uk.ac.lkl.cram.model.TLActivity;
import uk.ac.lkl.cram.ui.wizard.FilteredList.Filter;

/**
 * $Date$
 * $Revision$
 * @author Bernard Horan
 */
@SuppressWarnings("serial")
public class PredefinedVisualPanel extends JPanel {
    private FilteredList<TLActivity> filteredList;
    private static final Logger LOGGER = Logger.getLogger(PredefinedVisualPanel.class.getName());
    private final Filter<TLActivity> feedbackFilter;
    private final Filter<TLActivity> interactionFilter;

    /**
     * Creates new form PredefinedVisualPanel
     */
    public PredefinedVisualPanel() {
	initComponents();
        feedbackFilter = new FeedbackFilter();
        interactionFilter = new InteractionFilter();
	List<TLActivity> predefinedList = getPredefinedList();
	filteredList = new FilteredList<>(predefinedList);
	filteredList.setComparator(new Comparator<TLActivity>() {

	    @Override
	    public int compare(TLActivity t, TLActivity t1) {
		return t.getName().compareToIgnoreCase(t1.getName());
	    }
	});
	ListModel<TLActivity> listModel = new PredefinedListModel<>(filteredList);
	activityList.setModel(listModel);
	listModel.addListDataListener(new ListDataListener() {

	    @Override
	    public void intervalAdded(ListDataEvent lde) {
		//No op
	    }

	    @Override
	    public void intervalRemoved(ListDataEvent lde) {
		//No op
	    }

	    @Override
	    public void contentsChanged(ListDataEvent lde) {
		activityList.clearSelection();
	    }
	});
	activityList.setCellRenderer(new TLActivityRenderer());
    
	//Interaction Radio Buttons	
	ActionListener interactionListener = new ActionListener() {

	    @Override
	    public void actionPerformed(ActionEvent ae) {
		applyFilter();
	    }
	};
	tutorPresentCB.addActionListener(interactionListener);
	onlineCB.addActionListener(interactionListener);
	locationSpecificCB.addActionListener(interactionListener);
	timeSpecificCB.addActionListener(interactionListener);
	
	
	//Feedback Radio Buttons	
        ActionListener feedbackListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                applyFilter();
            }
        };
	tutorFeedbackCB.addActionListener(feedbackListener);
	tutorFeedbackCB.setActionCommand(LearnerFeedback.TUTOR.name());
	peerFeedbackCB.addActionListener(feedbackListener);
	peerFeedbackCB.setActionCommand(LearnerFeedback.PEER_ONLY.name());
	telFeedbackCB.addActionListener(feedbackListener);
	telFeedbackCB.setActionCommand(LearnerFeedback.TEL.name());
	noFeedbackCB.addActionListener(feedbackListener);
	noFeedbackCB.setActionCommand(LearnerFeedback.NONE.name());
        
        applyFilter();
    }

    @Override
    public String getName() {
	return "Select Predefined Activity";
    }
    
    JList<TLActivity> getActivityList() {
	return activityList;
    }
    
    private List<TLActivity> getPredefinedList() {
	List<TLActivity> predefinedList = new ArrayList<>();
	TLALibrary library = TLALibrary.getDefaultLibrary();
	for (TLActivity activity : library.getActivities()) {
	    predefinedList.add(activity);
	}
	return predefinedList;
    }
    
    private void applyFilter() {
	Filter<TLActivity> filter = new Filter<TLActivity>() {
	    @Override
	    public boolean isMatched(TLActivity tla) {
		boolean matchedFeedback = feedbackFilter.isMatched(tla);
                boolean matchedInteraction = interactionFilter.isMatched(tla);
		return matchedFeedback && matchedInteraction;
	    }
	};
	filteredList.setFilter(filter);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        activityList = new javax.swing.JList<TLActivity>();
        panelTitleLabel = new javax.swing.JLabel();
        feedbackPanel = new javax.swing.JPanel();
        tutorFeedbackCB = new javax.swing.JCheckBox();
        peerFeedbackCB = new javax.swing.JCheckBox();
        telFeedbackCB = new javax.swing.JCheckBox();
        noFeedbackCB = new javax.swing.JCheckBox();
        studentInteractionPanel = new javax.swing.JPanel();
        tutorPresentCB = new javax.swing.JCheckBox();
        onlineCB = new javax.swing.JCheckBox();
        locationSpecificCB = new javax.swing.JCheckBox();
        timeSpecificCB = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tlaTextArea = new javax.swing.JTextArea();

        activityList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        activityList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(activityList);

        org.openide.awt.Mnemonics.setLocalizedText(panelTitleLabel, org.openide.util.NbBundle.getMessage(PredefinedVisualPanel.class, "PredefinedVisualPanel.panelTitleLabel.text")); // NOI18N

        feedbackPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(PredefinedVisualPanel.class, "PredefinedVisualPanel.feedbackPanel.border.title"))); // NOI18N

        tutorFeedbackCB.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(tutorFeedbackCB, org.openide.util.NbBundle.getMessage(PredefinedVisualPanel.class, "PredefinedVisualPanel.tutorFeedbackCB.text")); // NOI18N

        peerFeedbackCB.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(peerFeedbackCB, org.openide.util.NbBundle.getMessage(PredefinedVisualPanel.class, "PredefinedVisualPanel.peerFeedbackCB.text")); // NOI18N

        telFeedbackCB.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(telFeedbackCB, org.openide.util.NbBundle.getMessage(PredefinedVisualPanel.class, "PredefinedVisualPanel.telFeedbackCB.text")); // NOI18N

        noFeedbackCB.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(noFeedbackCB, org.openide.util.NbBundle.getMessage(PredefinedVisualPanel.class, "PredefinedVisualPanel.noFeedbackCB.text")); // NOI18N

        javax.swing.GroupLayout feedbackPanelLayout = new javax.swing.GroupLayout(feedbackPanel);
        feedbackPanel.setLayout(feedbackPanelLayout);
        feedbackPanelLayout.setHorizontalGroup(
            feedbackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(feedbackPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(feedbackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tutorFeedbackCB)
                    .addComponent(peerFeedbackCB)
                    .addComponent(telFeedbackCB)
                    .addComponent(noFeedbackCB))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        feedbackPanelLayout.setVerticalGroup(
            feedbackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(feedbackPanelLayout.createSequentialGroup()
                .addComponent(tutorFeedbackCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(peerFeedbackCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(telFeedbackCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(noFeedbackCB)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        studentInteractionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(PredefinedVisualPanel.class, "PredefinedVisualPanel.studentInteractionPanel.border.title"))); // NOI18N

        tutorPresentCB.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(tutorPresentCB, org.openide.util.NbBundle.getMessage(PredefinedVisualPanel.class, "PredefinedVisualPanel.tutorPresentCB.text")); // NOI18N

        onlineCB.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(onlineCB, org.openide.util.NbBundle.getMessage(PredefinedVisualPanel.class, "PredefinedVisualPanel.onlineCB.text")); // NOI18N

        locationSpecificCB.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(locationSpecificCB, org.openide.util.NbBundle.getMessage(PredefinedVisualPanel.class, "PredefinedVisualPanel.locationSpecificCB.text")); // NOI18N

        timeSpecificCB.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(timeSpecificCB, org.openide.util.NbBundle.getMessage(PredefinedVisualPanel.class, "PredefinedVisualPanel.timeSpecificCB.text")); // NOI18N

        javax.swing.GroupLayout studentInteractionPanelLayout = new javax.swing.GroupLayout(studentInteractionPanel);
        studentInteractionPanel.setLayout(studentInteractionPanelLayout);
        studentInteractionPanelLayout.setHorizontalGroup(
            studentInteractionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentInteractionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(studentInteractionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tutorPresentCB)
                    .addComponent(onlineCB)
                    .addComponent(locationSpecificCB)
                    .addComponent(timeSpecificCB))
                .addContainerGap(93, Short.MAX_VALUE))
        );
        studentInteractionPanelLayout.setVerticalGroup(
            studentInteractionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentInteractionPanelLayout.createSequentialGroup()
                .addComponent(tutorPresentCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(onlineCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(locationSpecificCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(timeSpecificCB)
                .addContainerGap())
        );

        jScrollPane2.setEnabled(false);
        jScrollPane2.setFocusTraversalKeysEnabled(false);
        jScrollPane2.setFocusable(false);
        jScrollPane2.setRequestFocusEnabled(false);
        jScrollPane2.setVerifyInputWhenFocusTarget(false);
        jScrollPane2.setWheelScrollingEnabled(false);

        tlaTextArea.setColumns(20);
        tlaTextArea.setLineWrap(true);
        tlaTextArea.setRows(5);
        tlaTextArea.setWrapStyleWord(true);
        jScrollPane2.setViewportView(tlaTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(panelTitleLabel)
                .addContainerGap(145, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(studentInteractionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(feedbackPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(panelTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(studentInteractionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(feedbackPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {feedbackPanel, studentInteractionPanel});

    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<TLActivity> activityList;
    private javax.swing.JPanel feedbackPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JCheckBox locationSpecificCB;
    private javax.swing.JCheckBox noFeedbackCB;
    private javax.swing.JCheckBox onlineCB;
    private javax.swing.JLabel panelTitleLabel;
    private javax.swing.JCheckBox peerFeedbackCB;
    private javax.swing.JPanel studentInteractionPanel;
    private javax.swing.JCheckBox telFeedbackCB;
    private javax.swing.JCheckBox timeSpecificCB;
    private javax.swing.JTextArea tlaTextArea;
    private javax.swing.JCheckBox tutorFeedbackCB;
    private javax.swing.JCheckBox tutorPresentCB;
    // End of variables declaration//GEN-END:variables

    void setTLAInfo(String string) {
	tlaTextArea.setText(string);
    }

    private class TLActivityRenderer extends JLabel implements ListCellRenderer<TLActivity> {

	TLActivityRenderer() {
	    setOpaque(true);
	    setHorizontalAlignment(LEFT);
	    setVerticalAlignment(CENTER);
	}

	@Override
	public Component getListCellRendererComponent(JList<? extends TLActivity> list, TLActivity tla, int index, boolean isSelected, boolean cellHasFocus) {
	    if (isSelected) {
		setBackground(list.getSelectionBackground());
		setForeground(list.getSelectionForeground());
	    } else {
		setBackground(list.getBackground());
		setForeground(list.getForeground());
	    }
	    setText(tla.getName());
	    return this;
	}
    }
    
    private class FeedbackFilter implements Filter<TLActivity> {
        private final Set<JCheckBox> feedbackCheckBoxes = new HashSet<>();

        private FeedbackFilter() {
            feedbackCheckBoxes.add(tutorFeedbackCB);
            feedbackCheckBoxes.add(peerFeedbackCB);
            feedbackCheckBoxes.add(telFeedbackCB);
            feedbackCheckBoxes.add(noFeedbackCB);
        }

        @Override
        public boolean isMatched(TLActivity tla) {
            for (JCheckBox jCheckBox : feedbackCheckBoxes) {
                if (jCheckBox.isSelected()) {
                    LearnerFeedback feedback = LearnerFeedback.valueOf(jCheckBox.getActionCommand());
                    if (tla.getLearnerFeedback() == feedback) {
                        return true;
                    }
                }
            }
            return false;
        }
    }
    
    private class InteractionFilter implements Filter<TLActivity> {
        
        @Override
        public boolean isMatched(TLActivity tla) {
            StudentTeacherInteraction sti = tla.getStudentTeacherInteraction();
            if (tutorPresentCB.isSelected() && sti.isTutorSupported()) {
                return true;
            }
            if (onlineCB.isSelected() && sti.isOnline()) {
                return true;
            }
            if (locationSpecificCB.isSelected() && sti.isLocationSpecific()) {
                return true;
            }
            if (timeSpecificCB.isSelected() && sti.isTimeSpecific()) {
                return true;
            }
            return false;       
        }
        
    }
    
}
